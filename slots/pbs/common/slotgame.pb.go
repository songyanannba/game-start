// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: proto/common/slotgame.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 牌
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId     int32  `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`               //牌id
	IsPayTable bool   `protobuf:"varint,2,opt,name=is_pay_table,json=isPayTable,proto3" json:"is_pay_table,omitempty"` //是否为payTable
	IsWild     bool   `protobuf:"varint,3,opt,name=is_wild,json=isWild,proto3" json:"is_wild,omitempty"`               // 是否百搭
	X          int32  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`                                       //x坐标
	Y          int32  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`                                       //y坐标
	Multiple   int64  `protobuf:"varint,6,opt,name=multiple,proto3" json:"multiple,omitempty"`
	IsLock     bool   `protobuf:"varint,7,opt,name=is_lock,json=isLock,proto3" json:"is_lock,omitempty"` //锁定标签
	Redundancy string `protobuf:"bytes,8,opt,name=redundancy,proto3" json:"redundancy,omitempty"`        //"13-1-1-1-1" 机台-标签类型-方向(1 上 2 下)-标签起始位置-移动的距离  {9}
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *Card) GetIsPayTable() bool {
	if x != nil {
		return x.IsPayTable
	}
	return false
}

func (x *Card) GetIsWild() bool {
	if x != nil {
		return x.IsWild
	}
	return false
}

func (x *Card) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Card) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Card) GetMultiple() int64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *Card) GetIsLock() bool {
	if x != nil {
		return x.IsLock
	}
	return false
}

func (x *Card) GetRedundancy() string {
	if x != nil {
		return x.Redundancy
	}
	return ""
}

// 牌列表
type Cards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards  []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"` //牌id列表
	Amount int64   `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Cards) Reset() {
	*x = Cards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cards) ProtoMessage() {}

func (x *Cards) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cards.ProtoReflect.Descriptor instead.
func (*Cards) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{1}
}

func (x *Cards) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Cards) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SpinAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head         *AckHead    `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Opt          *SpinOpt    `protobuf:"bytes,2,opt,name=opt,proto3" json:"opt,omitempty"`
	TotalWin     int64       `protobuf:"varint,3,opt,name=total_win,json=totalWin,proto3" json:"total_win,omitempty"`             //总赢取
	StepList     []*SpinStep `protobuf:"bytes,4,rep,name=step_list,json=stepList,proto3" json:"step_list,omitempty"`              //转动步骤列表
	TxnId        int32       `protobuf:"varint,5,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`                      //交易id
	BeforeAmount int64       `protobuf:"varint,6,opt,name=before_amount,json=beforeAmount,proto3" json:"before_amount,omitempty"` //before余额
	AfterAmount  int64       `protobuf:"varint,7,opt,name=after_amount,json=afterAmount,proto3" json:"after_amount,omitempty"`    //after余额
}

func (x *SpinAck) Reset() {
	*x = SpinAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinAck) ProtoMessage() {}

func (x *SpinAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinAck.ProtoReflect.Descriptor instead.
func (*SpinAck) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{2}
}

func (x *SpinAck) GetHead() *AckHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SpinAck) GetOpt() *SpinOpt {
	if x != nil {
		return x.Opt
	}
	return nil
}

func (x *SpinAck) GetTotalWin() int64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *SpinAck) GetStepList() []*SpinStep {
	if x != nil {
		return x.StepList
	}
	return nil
}

func (x *SpinAck) GetTxnId() int32 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

func (x *SpinAck) GetBeforeAmount() int64 {
	if x != nil {
		return x.BeforeAmount
	}
	return 0
}

func (x *SpinAck) GetAfterAmount() int64 {
	if x != nil {
		return x.AfterAmount
	}
	return 0
}

// 转动步骤
type SpinStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                             //id
	Pid           int32    `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`                                           //pid
	Win           int64    `protobuf:"varint,3,opt,name=win,proto3" json:"win,omitempty"`                                           //赢取
	CardList      []*Cards `protobuf:"bytes,4,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`                  //结果牌id列表
	LineList      []*Cards `protobuf:"bytes,5,rep,name=line_list,json=lineList,proto3" json:"line_list,omitempty"`                  //划线牌列表
	JackpotId     int32    `protobuf:"varint,6,opt,name=jackpot_id,json=jackpotId,proto3" json:"jackpot_id,omitempty"`              //奖池id
	Type          int32    `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                         // 游戏类型 1 normal_spin 2 free_spin 3: re_spin 4: re_spin_link
	Which         int32    `protobuf:"varint,8,opt,name=which,proto3" json:"which,omitempty"`                                       // 配置选择
	FinalCardList []*Cards `protobuf:"bytes,9,rep,name=final_card_list,json=finalCardList,proto3" json:"final_card_list,omitempty"` //结果牌id列表  {13}
	Redundancy    string   `protobuf:"bytes,10,opt,name=redundancy,proto3" json:"redundancy,omitempty"`
	// slot24 = 当前轮次倍率  24-[1,2,3,4....]
	ExpInfo *ExpInfo `protobuf:"bytes,11,opt,name=exp_info,json=expInfo,proto3" json:"exp_info,omitempty"`
}

func (x *SpinStep) Reset() {
	*x = SpinStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinStep) ProtoMessage() {}

func (x *SpinStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinStep.ProtoReflect.Descriptor instead.
func (*SpinStep) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{3}
}

func (x *SpinStep) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpinStep) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SpinStep) GetWin() int64 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *SpinStep) GetCardList() []*Cards {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *SpinStep) GetLineList() []*Cards {
	if x != nil {
		return x.LineList
	}
	return nil
}

func (x *SpinStep) GetJackpotId() int32 {
	if x != nil {
		return x.JackpotId
	}
	return 0
}

func (x *SpinStep) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SpinStep) GetWhich() int32 {
	if x != nil {
		return x.Which
	}
	return 0
}

func (x *SpinStep) GetFinalCardList() []*Cards {
	if x != nil {
		return x.FinalCardList
	}
	return nil
}

func (x *SpinStep) GetRedundancy() string {
	if x != nil {
		return x.Redundancy
	}
	return ""
}

func (x *SpinStep) GetExpInfo() *ExpInfo {
	if x != nil {
		return x.ExpInfo
	}
	return nil
}

// 转动停止
type SpinStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head   *ReqHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	GameId int32    `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"` //游戏id
	TxnId  int32    `protobuf:"varint,3,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`    //交易id
}

func (x *SpinStop) Reset() {
	*x = SpinStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinStop) ProtoMessage() {}

func (x *SpinStop) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinStop.ProtoReflect.Descriptor instead.
func (*SpinStop) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{4}
}

func (x *SpinStop) GetHead() *ReqHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SpinStop) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SpinStop) GetTxnId() int32 {
	if x != nil {
		return x.TxnId
	}
	return 0
}

// 转动停止回复
type SpinStopAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head   *AckHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Amount int64    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"` //余额
}

func (x *SpinStopAck) Reset() {
	*x = SpinStopAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinStopAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinStopAck) ProtoMessage() {}

func (x *SpinStopAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinStopAck.ProtoReflect.Descriptor instead.
func (*SpinStopAck) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{5}
}

func (x *SpinStopAck) GetHead() *AckHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SpinStopAck) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// 记录菜单请求
type RecordMenuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head     *ReqHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Date     string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`                         // 年-月 2019-01
	GameId   int32    `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`      //游戏id
	TimeZone string   `protobuf:"bytes,4,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"` // 时区
}

func (x *RecordMenuReq) Reset() {
	*x = RecordMenuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMenuReq) ProtoMessage() {}

func (x *RecordMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMenuReq.ProtoReflect.Descriptor instead.
func (*RecordMenuReq) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{6}
}

func (x *RecordMenuReq) GetHead() *ReqHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RecordMenuReq) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *RecordMenuReq) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RecordMenuReq) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

// 记录菜单日期
type RecordMenuDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date int32   `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`        // 日期
	Hour []int32 `protobuf:"varint,2,rep,packed,name=hour,proto3" json:"hour,omitempty"` // 小时列表 0-23
}

func (x *RecordMenuDate) Reset() {
	*x = RecordMenuDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordMenuDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMenuDate) ProtoMessage() {}

func (x *RecordMenuDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMenuDate.ProtoReflect.Descriptor instead.
func (*RecordMenuDate) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{7}
}

func (x *RecordMenuDate) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *RecordMenuDate) GetHour() []int32 {
	if x != nil {
		return x.Hour
	}
	return nil
}

// 记录菜单回复
type RecordMenuAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *AckHead          `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	List []*RecordMenuDate `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` // 日期列表
}

func (x *RecordMenuAck) Reset() {
	*x = RecordMenuAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordMenuAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMenuAck) ProtoMessage() {}

func (x *RecordMenuAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMenuAck.ProtoReflect.Descriptor instead.
func (*RecordMenuAck) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{8}
}

func (x *RecordMenuAck) GetHead() *AckHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RecordMenuAck) GetList() []*RecordMenuDate {
	if x != nil {
		return x.List
	}
	return nil
}

// 记录请求
type RecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head     *ReqHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Time     string   `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`                         // 时间 分秒默认为0 2019-01-01 13:00:00
	GameId   int32    `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`      //游戏id
	TimeZone string   `protobuf:"bytes,4,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"` // 时区
}

func (x *RecordListReq) Reset() {
	*x = RecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordListReq) ProtoMessage() {}

func (x *RecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordListReq.ProtoReflect.Descriptor instead.
func (*RecordListReq) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{9}
}

func (x *RecordListReq) GetHead() *ReqHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RecordListReq) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *RecordListReq) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RecordListReq) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

// 记录信息
type RecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`       // 时间 19:44:00
	No      string `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`            // 编号
	Uint    string `protobuf:"bytes,3,opt,name=uint,proto3" json:"uint,omitempty"`        // 单位 $ ￥
	Bet     int64  `protobuf:"varint,4,opt,name=bet,proto3" json:"bet,omitempty"`         // 下注
	Win     int64  `protobuf:"varint,5,opt,name=win,proto3" json:"win,omitempty"`         // 赢取
	Balance int64  `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"` // 余额
}

func (x *RecordInfo) Reset() {
	*x = RecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordInfo) ProtoMessage() {}

func (x *RecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordInfo.ProtoReflect.Descriptor instead.
func (*RecordInfo) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{10}
}

func (x *RecordInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RecordInfo) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *RecordInfo) GetUint() string {
	if x != nil {
		return x.Uint
	}
	return ""
}

func (x *RecordInfo) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *RecordInfo) GetWin() int64 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *RecordInfo) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 记录回复
type RecordListAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head     *AckHead      `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	List     []*RecordInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                         //记录列表
	TimeZone string        `protobuf:"bytes,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"` // 时区
}

func (x *RecordListAck) Reset() {
	*x = RecordListAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordListAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordListAck) ProtoMessage() {}

func (x *RecordListAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordListAck.ProtoReflect.Descriptor instead.
func (*RecordListAck) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{11}
}

func (x *RecordListAck) GetHead() *AckHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RecordListAck) GetList() []*RecordInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RecordListAck) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

// 记录详情请求
type RecordDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *ReqHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	No   string   `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"` // 编号
}

func (x *RecordDetailReq) Reset() {
	*x = RecordDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDetailReq) ProtoMessage() {}

func (x *RecordDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDetailReq.ProtoReflect.Descriptor instead.
func (*RecordDetailReq) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{12}
}

func (x *RecordDetailReq) GetHead() *ReqHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RecordDetailReq) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

// 记录详情回复
type RecordDetailAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *AckHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Data []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 详细的ack数据
}

func (x *RecordDetailAck) Reset() {
	*x = RecordDetailAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDetailAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDetailAck) ProtoMessage() {}

func (x *RecordDetailAck) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDetailAck.ProtoReflect.Descriptor instead.
func (*RecordDetailAck) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{13}
}

func (x *RecordDetailAck) GetHead() *AckHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RecordDetailAck) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cols  []int32 `protobuf:"varint,1,rep,packed,name=cols,proto3" json:"cols,omitempty"`
	Cards *Card   `protobuf:"bytes,2,opt,name=cards,proto3" json:"cards,omitempty"` //牌id列表
}

func (x *ExpInfo) Reset() {
	*x = ExpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_common_slotgame_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpInfo) ProtoMessage() {}

func (x *ExpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_slotgame_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpInfo.ProtoReflect.Descriptor instead.
func (*ExpInfo) Descriptor() ([]byte, []int) {
	return file_proto_common_slotgame_proto_rawDescGZIP(), []int{14}
}

func (x *ExpInfo) GetCols() []int32 {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *ExpInfo) GetCards() *Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

var File_proto_common_slotgame_proto protoreflect.FileDescriptor

var file_proto_common_slotgame_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73,
	0x6c, 0x6f, 0x74, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcb, 0x01, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x69, 0x6c, 0x64, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x22, 0x43,
	0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x08, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x6b,
	0x12, 0x24, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x69,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x52, 0x08, 0x73,
	0x74, 0x65, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x02, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x69, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x68, 0x69, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x0f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x12, 0x2b, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x78, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a,
	0x09, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x0d, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x63,
	0x6b, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x81, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f,
	0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65,
	0x6e, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x22,
	0x65, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x61,
	0x63, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x71, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x69,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x62, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x7d, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22,
	0x49, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x71, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x22, 0x4d, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x63, 0x6b, 0x12,
	0x24, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x52,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x42, 0x0d, 0x5a,
	0x0b, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_common_slotgame_proto_rawDescOnce sync.Once
	file_proto_common_slotgame_proto_rawDescData = file_proto_common_slotgame_proto_rawDesc
)

func file_proto_common_slotgame_proto_rawDescGZIP() []byte {
	file_proto_common_slotgame_proto_rawDescOnce.Do(func() {
		file_proto_common_slotgame_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_common_slotgame_proto_rawDescData)
	})
	return file_proto_common_slotgame_proto_rawDescData
}

var file_proto_common_slotgame_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_common_slotgame_proto_goTypes = []interface{}{
	(*Card)(nil),            // 0: common.card
	(*Cards)(nil),           // 1: common.cards
	(*SpinAck)(nil),         // 2: common.spin_ack
	(*SpinStep)(nil),        // 3: common.spin_step
	(*SpinStop)(nil),        // 4: common.spin_stop
	(*SpinStopAck)(nil),     // 5: common.spin_stop_ack
	(*RecordMenuReq)(nil),   // 6: common.record_menu_req
	(*RecordMenuDate)(nil),  // 7: common.record_menu_date
	(*RecordMenuAck)(nil),   // 8: common.record_menu_ack
	(*RecordListReq)(nil),   // 9: common.record_list_req
	(*RecordInfo)(nil),      // 10: common.record_info
	(*RecordListAck)(nil),   // 11: common.record_list_ack
	(*RecordDetailReq)(nil), // 12: common.record_detail_req
	(*RecordDetailAck)(nil), // 13: common.record_detail_ack
	(*ExpInfo)(nil),         // 14: common.exp_info
	(*AckHead)(nil),         // 15: common.ack_head
	(*SpinOpt)(nil),         // 16: common.spin_opt
	(*ReqHead)(nil),         // 17: common.req_head
}
var file_proto_common_slotgame_proto_depIdxs = []int32{
	0,  // 0: common.cards.cards:type_name -> common.card
	15, // 1: common.spin_ack.head:type_name -> common.ack_head
	16, // 2: common.spin_ack.opt:type_name -> common.spin_opt
	3,  // 3: common.spin_ack.step_list:type_name -> common.spin_step
	1,  // 4: common.spin_step.card_list:type_name -> common.cards
	1,  // 5: common.spin_step.line_list:type_name -> common.cards
	1,  // 6: common.spin_step.final_card_list:type_name -> common.cards
	14, // 7: common.spin_step.exp_info:type_name -> common.exp_info
	17, // 8: common.spin_stop.head:type_name -> common.req_head
	15, // 9: common.spin_stop_ack.head:type_name -> common.ack_head
	17, // 10: common.record_menu_req.head:type_name -> common.req_head
	15, // 11: common.record_menu_ack.head:type_name -> common.ack_head
	7,  // 12: common.record_menu_ack.list:type_name -> common.record_menu_date
	17, // 13: common.record_list_req.head:type_name -> common.req_head
	15, // 14: common.record_list_ack.head:type_name -> common.ack_head
	10, // 15: common.record_list_ack.list:type_name -> common.record_info
	17, // 16: common.record_detail_req.head:type_name -> common.req_head
	15, // 17: common.record_detail_ack.head:type_name -> common.ack_head
	0,  // 18: common.exp_info.cards:type_name -> common.card
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_common_slotgame_proto_init() }
func file_proto_common_slotgame_proto_init() {
	if File_proto_common_slotgame_proto != nil {
		return
	}
	file_proto_common_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_common_slotgame_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinStopAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordMenuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordMenuDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordMenuAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordListAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDetailAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_common_slotgame_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_common_slotgame_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_common_slotgame_proto_goTypes,
		DependencyIndexes: file_proto_common_slotgame_proto_depIdxs,
		MessageInfos:      file_proto_common_slotgame_proto_msgTypes,
	}.Build()
	File_proto_common_slotgame_proto = out.File
	file_proto_common_slotgame_proto_rawDesc = nil
	file_proto_common_slotgame_proto_goTypes = nil
	file_proto_common_slotgame_proto_depIdxs = nil
}
